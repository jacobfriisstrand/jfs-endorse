---
export const prerender = true;
import CaseListItem from "@/components/CaseListItem.astro";
import PageHeading from "@/components/PageHeading.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { fetchData } from "@/lib/fetchData";
import { Seo } from "@datocms/astro/Seo";
import type { CaseItem } from "@/components/CaseListItem.astro";

interface MetadataProps {
  allPages: {
    slug: string;
  }[];
}

interface PageProps {
  page: {
    headline: string;
    seo: {
      attributes: Record<string, string>;
      content: string;
      tag: string;
    }[];
  };
  allCases: CaseItem[];
}

export async function getStaticPaths() {
  const data = await fetchData<MetadataProps>(`{
    allPages {
      slug: pageSlug
    }
  }`);
  return data.allPages.map(({ slug }) => {
    return {
      params: { slug },
    };
  });
}

const pageData = await fetchData<PageProps>(`{
  page(filter: {pageSlug: {eq: "cases"}}) {
    seo: _seoMetaTags {
      attributes
      content
      tag
    }
    headline: pageHeadline
  }
    allCases {
    logo: caseClientLogo {
      attributes: responsiveImage(
        imgixParams: {fit: clamp, auto: format, ar: "1:1", h: 75}
      ) {
        src
        width
        height
        alt
      }
    }
    image: caseMedia {
      attributes: responsiveImage(
        imgixParams: {fit: crop, auto: format, crop: focalpoint, ar: "3:4"}
      ) {
        src
        width
        height
        alt
        base64
      }
    }
    caseEyebrow
    caseClientName
    caseShortDescription
    caseLinkText
    slug
  }
}`);
---

<Seo data={[...pageData.page.seo]} />

<BaseLayout>
  <PageHeading>{pageData.page.headline}</PageHeading>

  <ul class="case-list">
    {pageData.allCases.map((item) => <CaseListItem item={item} />)}
  </ul>
</BaseLayout>

<style>
  .case-list {
    display: grid;
    gap: var(--spacing-64);
    grid-template-columns: 1fr;

    @media (min-width: 768px) {
      grid-template-columns: repeat(2, 1fr);
    }

    @media (min-width: 1400px) {
      grid-template-columns: repeat(3, 1fr);
      gap: var(--spacing-64);
    }
  }
</style>
