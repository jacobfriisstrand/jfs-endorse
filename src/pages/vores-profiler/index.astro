---
export const prerender = true;
import PageHeading from "@/components/PageHeading.astro";
import Heading from "@/components/ui/Heading.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { fetchData } from "@/lib/fetchData";
import { Seo } from "@datocms/astro/Seo";
import { Image } from "astro:assets";

interface MetadataProps {
  allPages: {
    slug: string;
  }[];
}

interface PageProps {
  page: {
    headline: string;
    seo: {
      attributes: Record<string, string>;
      content: string;
      tag: string;
    }[];
  };
  allEndorsers: {
    img: {
      attributes: {
        src: string;
        width: number;
        height: number;
        alt: string;
      };
    };
    endorserName: string;
    endorserTitle: string;
    endorserSlug: string;
  }[];
}

export async function getStaticPaths() {
  const data = await fetchData<MetadataProps>(`{
    allPages {
      slug: pageSlug
    }
  }`);
  return data.allPages.map(({ slug }) => {
    return {
      params: { slug },
    };
  });
}

const pageData = await fetchData<PageProps>(`{
  page(filter: {pageSlug: {eq: "vores-profiler"}}) {
    seo: _seoMetaTags {
      attributes
      content
      tag
    }
    headline: pageHeadline
  }
  allEndorsers {
    img: endorserImage {
      attributes: responsiveImage(
        imgixParams: {fit: crop, auto: format, crop: focalpoint, ar: "4:3"}
      ) {
        src
        width
        height
        alt
      }
    }
    endorserName
    endorserTitle
    endorserSlug
  }
}`);
---

<Seo data={[...pageData.page.seo]} />

<BaseLayout>
  <PageHeading>{pageData.page.headline}</PageHeading>
  <ul class="endorser-list">
    {
      pageData.allEndorsers.map((endorser, index) => (
        <li>
          <a class={`endorser-name ${index === 0 ? "initial-active" : ""}`} href={endorser.endorserSlug}>
            {endorser.endorserName} <span>{endorser.endorserTitle}</span>
          </a>
          <Image src={endorser.img.attributes.src} width={endorser.img.attributes.width} height={endorser.img.attributes.height} alt={endorser.img.attributes.alt} />
        </li>
      ))
    }
  </ul>
</BaseLayout>

<style>
  .endorser-list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-32);

    @media (min-width: 1024px) {
      gap: var(--spacing-20);
    }
  }

  li {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-8);
  }

  .endorser-name {
    width: fit-content;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-4);
    color: var(--base-dark);
    order: 2;

    span {
      font-size: var(--text-xs);
    }

    @media (min-width: 1024px) {
      color: var(--base-lightGray);
      font-size: var(--text-lg);
      font-family: var(--font-serif);
      flex-direction: row;
      align-items: last baseline;
      gap: var(--spacing-8);

      span {
        font-size: var(--text-sm);
      }

      &.initial-active:not(.interacted),
      &:hover,
      &:focus {
        color: var(--base-dark);
      }

      &.initial-active:not(.interacted) + img,
      &:hover + img,
      &:focus + img {
        opacity: 1;
        transition: opacity var(--duration-500) var(--ease-in-out-quint);
      }
    }
  }

  @media (min-width: 1024px) {
    img {
      position: absolute;
      top: 0;
      right: 0;
      max-width: 50%;
      height: 100%;
      object-fit: cover;
      filter: grayscale(100%);
      opacity: 0;
      transition: opacity var(--duration-500) var(--linear);
      overflow: hidden;
    }

    .initial-active:not(.interacted) + img {
      opacity: 1;
    }
  }
</style>

<script>
  const endorserLinks = document.querySelectorAll(".endorser-name");
  const firstLink = document.querySelector(".endorser-name.initial-active");

  endorserLinks.forEach((link) => {
    link.addEventListener("mouseenter", () => {
      if (firstLink) {
        firstLink.classList.remove("initial-active");
        firstLink.classList.add("interacted");
      }
    });
  });
</script>
